import cv2
import face_recognition
import csv

# Load data from CSV file
data_file = "data.csv"

face_data = {}
with open(data_file, "r") as csvfile:
    reader = csv.reader(csvfile)
    next(reader)  # Skip the header row
    for row in reader:
        name, image_filename = row
        try:
            # Load image and compute face encoding
            face_image = face_recognition.load_image_file(image_filename)
            face_encoding = face_recognition.face_encodings(face_image)[0]
            face_data[name] = {"encoding": face_encoding, "image": face_image}
        except Exception as e:
            print(f"Error loading {name}'s image ({image_filename}): {e}")

# Initialize Video Capture
video_capture = cv2.VideoCapture(0)  # Change the number based on your camera index

# Face recognition threshold (experiment with different values)
recognition_threshold = 0.5

while True:
    # Capture frame-by-frame
    ret, frame = video_capture.read()

    # Find all face locations and face encodings in the current frame
    face_locations = face_recognition.face_locations(frame)
    face_encodings = face_recognition.face_encodings(frame, face_locations)

    # Loop through each face found in the frame
    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        # Check if the face matches any known faces
        matches = face_recognition.compare_faces(
            [data["encoding"] for data in face_data.values()],
            face_encoding,
            tolerance=recognition_threshold
        )
        name = "Unknown"

        # If a match is found, use the name of the first matching face
        if True in matches:
            first_match_index = matches.index(True)
            name = list(face_data.keys())[first_match_index]

        # Draw a rectangle around the face and display the name
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.5, (255, 255, 255), 1)

    # Display the resulting frame
    cv2.imshow("Video", frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Release the video capture object and close all windows
video_capture.release()
cv2.destroyAllWindows()
